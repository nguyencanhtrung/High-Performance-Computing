{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13600\viewh21000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 -- Trung C. Nguyen  NOTE--\
Dec 11, 2016\
-----------------------------------------------\
Levels of optimization\
1. Algorithm level\
2. Basic priciples for efficiency: (decrease memory access, coaleces memory access, avoid code divergent)\
3. Arch-specific detailed optimization (bank conflict, optimizing registers)\
4. Micro-optimization in instruction level\
\
---- ON GPU: Most optimization getting from Algorithm level and basic principle\
		Arch-specific detailed optimization get serveral percentage of optimization\
\
-------------------------------------------------\
Systematic optimization process\
APOD: Analyze Parallelize Optimize Deploy\
\
	- Analyze: Profile whole application\
		- Where can it benefit?\
		- By how much?\
	- Parallilize: \
		- Pick an approach \
			- libraries\
			- Directives (Open MP, Open ACC)\
			- Programmng language\
		- Pick an algorithm (IMPORTANT)\
	- Optimize:\
		- Profile - driven optimization (measure)\
	- Deploy:\
		- Do not optimize in a vacuum (small speed up helps)\
		- Make it real\
\
Weak and Strong Scaling\
	- Weak scaling: run a larger problem\
		+ varies solution size for Fixed problem size per core\
	- Strong scaling: run a problem faster\
		+ Fixed problem size per core Fixed total problem size\
\
ANALYZE\
	- Understanding hotspots\
		+ Amdahl's Law\
			Total speedup from parallelization is limited by portion of time spent doing something to be parallelized\
	- Understanding weak and strong scaling\
\
\
* To be really careful about benchmarking purposes, we should run every kernel once\
 * to "warm" the system and avoid any compilation or code-caching effects, then run \
 * every kernel 10 or 100 times and average the timings to smooth out any variance. \
 * But this makes for messy code and our goal is teaching, not detailed benchmarking.\
\
\
	Device Querry\
	Mem clock: 2508 MHz\
	Mem bus: 128 bit\
	=> Maximum 40.128 GB/s\
		40 - 60% Okay\
		60 - 75%: Goog\
		> 75% Excellent\
\
	Bandwidth is reduced => Check memory coloesce\
\
Most important pattern for optimization: Memory bandwidth\
\
\
\
\
		\
		}